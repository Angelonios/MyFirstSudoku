/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package objects;

import interfaces.ISolver;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author AsusPC
 */
public class Solver implements ISolver {

    private final Game game;
    private Grid currentGrid;
    private final Checker checker;

    /**
     *
     * @param g
     */
    public Solver(Game g) {
        game = g;
        checker = g.checker;
        currentGrid = g.gameGrid;
    }
    
    @Override
    public void fillSudoku(Grid grid) {
        currentGrid = grid;
        checker.setCurrentGrid(currentGrid);
        solve(0, 0);
    }

    @Override
    public void fillSudoku() {
        checker.setCurrentGrid(currentGrid);
        solve(0, 0);
    }

    /**
     * This method contains and algorithm using recursive depth first search and 
     * backtracking to find a sudoku solution which is unique. This way a sudoku
     * puzzle of any difficulty can be solved, even an empty grid. 
     * @param row
     * @param col
     * @return 
     */
    private boolean solve(int row, int col) {
        if (currentGrid.getNum(row, col) == 0) {
            List<Integer> list = initList();
            for(int i = 0; i < 9; i++){
                int num = pickNum(list);
                if (checker.checkNum(currentGrid, row, col, num)) {
                    currentGrid.setNum(num, row, col);
                    if (pickNext(row, col)) {
                        return true;
                    }
                }
            }
            currentGrid.setNum(0, row, col);
            return false;
        } else {
            return pickNext(row, col);
        }
    }

    /**
     * This method is for traversing the grid of a Sudoku. It's used in 
     * solve(row,col) method. The parameters row and col are coords of a current
     * cell and using them the method picks the next cell to the left or the 
     * first cell on the new line if current cell is at the end of current row.
     * After correct cell is picked and if this cell is not the terminal point
     * the method passes coords to the solve(row, col) method.
     * @param row current row index.
     * @param col current col index.
     * @return boolean value, whether recursive solving was successful or not.
     */
    private boolean pickNext(int row, int col) {
        int c = col;
        int r = row;
        c++;
        if (c == 9) {
            c = 0;
            r++;
        }
        if (r == 9) {
            return true;
        }
        return solve(r, c);
    }

    /**
     * This method picks a new number from a given list. It's used in solve(row,
     * col) method. The parameter is a list of numbers from 1-9, which have been
     * shuffled. This kind of list can be generated by initList() method in this
     * class.
     * 
     * @param list list with shuffled numbers.
     * @return number.
     */
    private int pickNum(List<Integer> list){
        int number = list.get(0);
        list.remove(0);
        return number;
    }
    
    /**
     * Initializes a list with numbers from 1 to 9, shuffles them and returns
     * the list.
     *
     * @return shuffled list of numbers from 1 to 9.
     */
    public List<Integer> initList() {
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i < 10; i++) {
            result.add(i);
        }
        Collections.shuffle(result);
        return result;
    }
}
